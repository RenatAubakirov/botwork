from __future__ import print_function
import telebot
from telebot import types
import httplib2
import datetime
import time
import config
import telepot
import schedule
from google.oauth2 import service_account
from googleapiclient import discovery

bot = telebot.TeleBot('7029317973:AAFoUffqtX66UOcGK-ye1B0D299LTl0ze4E') ## –ó–î–ï–°–¨ –í–°–¢–ê–í–õ–Ø–ï–ú –¢–û–ö–ï–ù –ë–û–¢–ê

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton("–†–∞–±–æ—Ç–∞")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞—É—Ç—Å—Ç–∞—Ñ–µ –¢–ö95", reply_markup=markup)
## –ö–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ä—Ç")
def start_command(message):
    bot.send_message(message.chat.id, "–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É start")

@bot.message_handler(func=lambda message: message.text == "–†–∞–±–æ—Ç–∞")
def check_calendar(message):
    job(message)
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è "7"
def job(message):
    credentials = service_account.Credentials.from_service_account_file('credentials.json')
    service = discovery.build('calendar', 'v3', credentials=credentials)

    now = datetime.datetime.utcnow().isoformat() + 'Z'  # 'Z' indicates UTC time
    end_of_week = (datetime.datetime.utcnow() + datetime.timedelta(days=7)).isoformat() + 'Z'  # End of the week
    print('Checking events from', now, 'to', end_of_week)

    eventsResult = service.events().list(
        calendarId='7cf44d58482818e043c1b95b293016277bc379c15b68102f322f276ab657f8e3@group.calendar.google.com',
        # –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤–ª—è–µ–º id –∏–º–µ–Ω–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –ø—É–Ω–∫—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        timeMin=now,
        timeMax=end_of_week,
        maxResults=100,
        singleEvents=True,
        orderBy='startTime'
    ).execute()

    events = eventsResult.get('items', [])
# –í—ã–≤–æ–¥
    if not events:
        bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.')
    else:
        for event in events:
            start = event['start'].get('dateTime', event['start'].get('date'))
            summary = event['summary']
            msg = f"<b>{summary}</b> - {start}"
            bot.send_message(message.chat.id, msg, parse_mode='HTML')

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"
@bot.message_handler(func=lambda message: message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
def greet(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –Ø —Ä–∞–¥, —á—Ç–æ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –º–Ω–æ–π. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–º–µ–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–†–ê–ë–û–¢–ê\".")


bot.polling(none_stop=True)