from telebot import types
from check_calendar import check_calendar
from create_shift_button import create_shift_event
from allowed_users import allowed_users

def add_handlers(bot):
    @bot.message_handler(commands=['start'])
    def start(message):
        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
        btn2 = types.KeyboardButton("–†–∞–±–æ—Ç–∞")
        user_markup.add(btn1, btn2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ —Å–ø–∏—Å–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if message.from_user.username in allowed_users:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—É" —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            btn3 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—É")
            user_markup.add(btn3)

        bot.send_message(message.chat.id, f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞—É—Ç—Å—Ç–∞—Ñ–µ. –í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username}", reply_markup=user_markup)

    @bot.message_handler(func=lambda message: message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    def greet(message):
        bot.send_message(message.chat.id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –Ø —Ä–∞–¥, —á—Ç–æ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –º–Ω–æ–π. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–º–µ–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–†–ê–ë–û–¢–ê\".")

    @bot.message_handler(func=lambda message: message.text == "–†–∞–±–æ—Ç–∞")
    def check_calendar_handler(message):
        try:
            check_calendar(bot, message)
        except Exception as e:
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ", e)
            bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç.")

    @bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—É")
    def create_shift(message):
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—É –∏ —Ç–µ–º—É —Å–æ–±—ã—Ç–∏—è
        bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—É (–¥–¥-–º–º-–≥–≥–≥–≥)?")
        bot.register_next_step_handler(message, ask_date)

    def ask_date(message):
        date = message.text
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º—É —Å–æ–±—ã—Ç–∏—è
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É —Å–º–µ–Ω—ã:")
        bot.register_next_step_handler(message, lambda message: ask_summary(message, date))

    def ask_summary(message, date):
        summary = message.text
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            create_shift_event(bot, message, date, summary)
        except Exception as e:
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ", e)
            bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç.")
