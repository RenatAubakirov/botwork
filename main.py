from __future__ import print_function
import telebot
from telebot import types
import httplib2
import datetime
import time
import config
import telepot
import schedule
from google.oauth2 import service_account
from googleapiclient import discovery

bot = telebot.TeleBot('7029317973:AAFoUffqtX66UOcGK-ye1B0D299LTl0ze4E')

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton("–†–∞–±–æ—Ç–∞")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞—É—Ç—Å—Ç–∞—Ñ–µ –¢–ö95", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–†–∞–±–æ—Ç–∞")
def check_calendar(message):
    job(message)

def job(message):
    credentials = service_account.Credentials.from_service_account_file('credentials.json')
    service = discovery.build('calendar', 'v3', credentials=credentials)

    now = datetime.datetime.utcnow().isoformat() + 'Z'  # 'Z' indicates UTC time
    end_of_week = (datetime.datetime.utcnow() + datetime.timedelta(days=7)).isoformat() + 'Z'  # End of the week
    print('Checking events from', now, 'to', end_of_week)

    eventsResult = service.events().list(
        calendarId='7cf44d58482818e043c1b95b293016277bc379c15b68102f322f276ab657f8e3@group.calendar.google.com',
        timeMin=now,
        timeMax=end_of_week,
        maxResults=100,
        singleEvents=True,
        orderBy='startTime'
    ).execute()

    events = eventsResult.get('items', [])

    if not events:
        bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.')
    else:
        msg = '<b>–°–æ–±—ã—Ç–∏—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:</b>\n\n'
        for event in events:
            start = event['start'].get('dateTime', event['start'].get('date'))
            summary = event['summary']
            msg += f"<b>{summary}</b> - {start}\n"
        bot.send_message(message.chat.id, msg, parse_mode='HTML')

bot.polling(none_stop=True)